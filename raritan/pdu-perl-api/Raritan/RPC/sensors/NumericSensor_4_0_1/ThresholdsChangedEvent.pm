# Do NOT edit this file!
# It was generated by IdlC from NumericSensor.idl.

use strict;

package Raritan::RPC::sensors::NumericSensor_4_0_1::ThresholdsChangedEvent;

use constant typeId => "sensors.NumericSensor_4_0_1.ThresholdsChangedEvent:1.0.0";
use Raritan::RPC::sensors::NumericSensor_4_0_1::Thresholds;
use Raritan::RPC::event::UserEvent;
use Raritan::RPC::sensors::NumericSensor_4_0_1::Thresholds;

sub encode {
    my ($in) = @_;
    my $encoded = Raritan::RPC::event::UserEvent::encode($in);
    $encoded->{'oldThresholds'} = Raritan::RPC::sensors::NumericSensor_4_0_1::Thresholds::encode($in->{'oldThresholds'});
    $encoded->{'newThresholds'} = Raritan::RPC::sensors::NumericSensor_4_0_1::Thresholds::encode($in->{'newThresholds'});
    return $encoded;
}

sub decode {
    my ($agent, $in) = @_;
    my $decoded = Raritan::RPC::event::UserEvent::decode($agent, $in);
    $decoded->{'oldThresholds'} = Raritan::RPC::sensors::NumericSensor_4_0_1::Thresholds::decode($agent, $in->{'oldThresholds'});
    $decoded->{'newThresholds'} = Raritan::RPC::sensors::NumericSensor_4_0_1::Thresholds::decode($agent, $in->{'newThresholds'});
    return $decoded;
}

Raritan::RPC::Registry::registerCodecClass('sensors.NumericSensor_4_0_1.ThresholdsChangedEvent', 1, 0, 0, 'Raritan::RPC::sensors::NumericSensor_4_0_1::ThresholdsChangedEvent');
1;
