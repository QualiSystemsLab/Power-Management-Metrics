# Do NOT edit this file!
# It was generated by IdlC from NumericSensor.idl.

use strict;

package Raritan::RPC::sensors::NumericSensor::MetaData;

use Raritan::RPC::sensors::Sensor::TypeSpec;
use Raritan::RPC::sensors::NumericSensor::Range;

sub encode {
    my ($in) = @_;
    my $encoded = {};
    $encoded->{'type'} = Raritan::RPC::sensors::Sensor::TypeSpec::encode($in->{'type'});
    $encoded->{'decdigits'} = 1 * $in->{'decdigits'};
    $encoded->{'accuracy'} = 1 * $in->{'accuracy'};
    $encoded->{'resolution'} = 1 * $in->{'resolution'};
    $encoded->{'tolerance'} = 1 * $in->{'tolerance'};
    $encoded->{'range'} = Raritan::RPC::sensors::NumericSensor::Range::encode($in->{'range'});
    return $encoded;
}

sub decode {
    my ($agent, $in) = @_;
    my $decoded = {};
    $decoded->{'type'} = Raritan::RPC::sensors::Sensor::TypeSpec::decode($agent, $in->{'type'});
    $decoded->{'decdigits'} = $in->{'decdigits'};
    $decoded->{'accuracy'} = $in->{'accuracy'};
    $decoded->{'resolution'} = $in->{'resolution'};
    $decoded->{'tolerance'} = $in->{'tolerance'};
    $decoded->{'range'} = Raritan::RPC::sensors::NumericSensor::Range::decode($agent, $in->{'range'});
    return $decoded;
}

1;
