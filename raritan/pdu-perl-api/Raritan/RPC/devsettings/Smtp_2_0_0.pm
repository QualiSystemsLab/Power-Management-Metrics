# Do NOT edit this file!
# It was generated by IdlC from Smtp.idl.

use strict;

package Raritan::RPC::devsettings::Smtp_2_0_0;

use parent qw(Raritan::RPC::RemoteObject);

use constant typeId => "devsettings.Smtp:2.0.0";

sub new {
    my ($class, $agent, $rid, $typeId) = @_;
    $typeId = $typeId || Raritan::RPC::devsettings::Smtp_2_0_0::typeId;
    return $class->SUPER::new($agent, $rid, $typeId);
}

use constant ERR_INVALID_PARAMS => 1;

use Raritan::RPC::devsettings::Smtp_2_0_0::Configuration;

sub getConfiguration($) {
    my ($self) = @_;
    my $agent = $self->{'agent'};
    my $args = {};
    my $rsp = $agent->json_rpc($self->{'rid'}, 'getConfiguration', $args);
    my $_ret_;
    $_ret_ = Raritan::RPC::devsettings::Smtp_2_0_0::Configuration::decode($agent, $rsp->{'_ret_'});
    return $_ret_;
}

use Raritan::RPC::devsettings::Smtp_2_0_0::Configuration;

sub setConfiguration($$) {
    my ($self, $cfg) = @_;
    my $agent = $self->{'agent'};
    my $args = {};
    $args->{'cfg'} = Raritan::RPC::devsettings::Smtp_2_0_0::Configuration::encode($cfg);
    my $rsp = $agent->json_rpc($self->{'rid'}, 'setConfiguration', $args);
    my $_ret_;
    $_ret_ = $rsp->{'_ret_'};
    return $_ret_;
}

use Raritan::RPC::devsettings::Smtp_2_0_0::Configuration;
use Raritan::RPC::devsettings::Smtp_2_0_0::TestResult;

sub testConfiguration($$$) {
    my ($self, $cfg, $recipients) = @_;
    my $agent = $self->{'agent'};
    my $args = {};
    $args->{'cfg'} = Raritan::RPC::devsettings::Smtp_2_0_0::Configuration::encode($cfg);
    $args->{'recipients'} = [];
    for (my $i0 = 0; $i0 <= $#{$recipients}; $i0++) {
        $args->{'recipients'}->[$i0] = "$recipients->[$i0]";
    }
    my $rsp = $agent->json_rpc($self->{'rid'}, 'testConfiguration', $args);
    my $_ret_;
    $_ret_ = Raritan::RPC::devsettings::Smtp_2_0_0::TestResult::decode($agent, $rsp->{'_ret_'});
    return $_ret_;
}

Raritan::RPC::Registry::registerProxyClass('devsettings.Smtp', 2, 0, 0, 'Raritan::RPC::devsettings::Smtp_2_0_0');
1;
