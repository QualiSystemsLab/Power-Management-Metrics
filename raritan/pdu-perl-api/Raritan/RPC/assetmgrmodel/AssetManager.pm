# Do NOT edit this file!
# It was generated by IdlC from AssetManager.idl.

use strict;

package Raritan::RPC::assetmgrmodel::AssetManager;

use parent qw(Raritan::RPC::RemoteObject);

use constant typeId => "assetmgrmodel.AssetManager:1.0.0";

sub new {
    my ($class, $agent, $rid, $typeId) = @_;
    $typeId = $typeId || Raritan::RPC::assetmgrmodel::AssetManager::typeId;
    return $class->SUPER::new($agent, $rid, $typeId);
}

use constant ERR_NO_ERROR => 0;

use constant ERR_INVALID_PARAM => 1;

use constant ERR_NO_ASSET_STRIPS => 2;

use Raritan::RPC::assetmgrmodel::AssetManager::Settings;

sub getSettings($$) {
    my ($self, $settings) = @_;
    my $agent = $self->{'agent'};
    my $args = {};
    my $rsp = $agent->json_rpc($self->{'rid'}, 'getSettings', $args);
    $$settings = Raritan::RPC::assetmgrmodel::AssetManager::Settings::decode($agent, $rsp->{'settings'});
    my $_ret_;
    $_ret_ = $rsp->{'_ret_'};
    return $_ret_;
}

use Raritan::RPC::assetmgrmodel::AssetManager::Settings;

sub setSettings($$) {
    my ($self, $settings) = @_;
    my $agent = $self->{'agent'};
    my $args = {};
    $args->{'settings'} = Raritan::RPC::assetmgrmodel::AssetManager::Settings::encode($settings);
    my $rsp = $agent->json_rpc($self->{'rid'}, 'setSettings', $args);
    my $_ret_;
    $_ret_ = $rsp->{'_ret_'};
    return $_ret_;
}


sub getAssetStrips($) {
    my ($self) = @_;
    my $agent = $self->{'agent'};
    my $args = {};
    my $rsp = $agent->json_rpc($self->{'rid'}, 'getAssetStrips', $args);
    my $_ret_;
    $_ret_ = [];
    for (my $i0 = 0; $i0 <= $#{$rsp->{'_ret_'}}; $i0++) {
        $_ret_->[$i0] = Raritan::RPC::ObjectCodec::decode($agent, $rsp->{'_ret_'}->[$i0], 'assetmgrmodel.AssetStrip');
    }
    return $_ret_;
}

Raritan::RPC::Registry::registerProxyClass('assetmgrmodel.AssetManager', 1, 0, 0, 'Raritan::RPC::assetmgrmodel::AssetManager');
1;
