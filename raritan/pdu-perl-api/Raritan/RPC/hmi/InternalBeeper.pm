# Do NOT edit this file!
# It was generated by IdlC from InternalBeeper.idl.

use strict;

package Raritan::RPC::hmi::InternalBeeper;

use parent qw(Raritan::RPC::RemoteObject);

use constant typeId => "hmi.InternalBeeper:1.0.0";

sub new {
    my ($class, $agent, $rid, $typeId) = @_;
    $typeId = $typeId || Raritan::RPC::hmi::InternalBeeper::typeId;
    return $class->SUPER::new($agent, $rid, $typeId);
}

sub mute($$) {
    my ($self, $muted) = @_;
    my $agent = $self->{'agent'};
    my $args = {};
    $args->{'muted'} = ($muted) ? JSON::true : JSON::false;
    my $rsp = $agent->json_rpc($self->{'rid'}, 'mute', $args);
}

sub isMuted($) {
    my ($self) = @_;
    my $agent = $self->{'agent'};
    my $args = {};
    my $rsp = $agent->json_rpc($self->{'rid'}, 'isMuted', $args);
    my $_ret_;
    $_ret_ = ($rsp->{'_ret_'}) ? 1 : 0;
    return $_ret_;
}

sub activate($$$$) {
    my ($self, $on, $reason, $timeout) = @_;
    my $agent = $self->{'agent'};
    my $args = {};
    $args->{'on'} = ($on) ? JSON::true : JSON::false;
    $args->{'reason'} = "$reason";
    $args->{'timeout'} = 1 * $timeout;
    my $rsp = $agent->json_rpc($self->{'rid'}, 'activate', $args);
}


sub getState($$) {
    my ($self, $reason) = @_;
    my $agent = $self->{'agent'};
    my $args = {};
    my $rsp = $agent->json_rpc($self->{'rid'}, 'getState', $args);
    $$reason = $rsp->{'reason'};
    my $_ret_;
    $_ret_ = $rsp->{'_ret_'};
    return $_ret_;
}

Raritan::RPC::Registry::registerProxyClass('hmi.InternalBeeper', 1, 0, 0, 'Raritan::RPC::hmi::InternalBeeper');
1;
