# Do NOT edit this file!
# It was generated by IdlC from Usb.idl.

use strict;

package Raritan::RPC::usb::Usb;

use parent qw(Raritan::RPC::RemoteObject);

use constant typeId => "usb.Usb:1.0.0";

sub new {
    my ($class, $agent, $rid, $typeId) = @_;
    $typeId = $typeId || Raritan::RPC::usb::Usb::typeId;
    return $class->SUPER::new($agent, $rid, $typeId);
}

use Raritan::RPC::usb::UsbDevice;

sub getDevices($$) {
    my ($self, $usbDevices) = @_;
    my $agent = $self->{'agent'};
    my $args = {};
    my $rsp = $agent->json_rpc($self->{'rid'}, 'getDevices', $args);
    $$usbDevices = [];
    for (my $i0 = 0; $i0 <= $#{$rsp->{'usbDevices'}}; $i0++) {
        $$usbDevices->[$i0] = Raritan::RPC::usb::UsbDevice::decode($agent, $rsp->{'usbDevices'}->[$i0]);
    }
}

Raritan::RPC::Registry::registerProxyClass('usb.Usb', 1, 0, 0, 'Raritan::RPC::usb::Usb');
1;
