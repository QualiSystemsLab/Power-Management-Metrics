# Do NOT edit this file!
# It was generated by IdlC from EventEngine.idl.

use strict;

package Raritan::RPC::event::Event;

use Raritan::RPC::event::KeyValue;

sub encode {
    my ($in) = @_;
    my $encoded = {};
    $encoded->{'type'} = $in->{'type'};
    $encoded->{'id'} = [];
    for (my $i0 = 0; $i0 <= $#{$in->{'id'}}; $i0++) {
        $encoded->{'id'}->[$i0] = "$in->{'id'}->[$i0]";
    }
    $encoded->{'asserted'} = ($in->{'asserted'}) ? JSON::true : JSON::false;
    $encoded->{'timeStamp'} = 1 * $in->{'timeStamp'};
    $encoded->{'context'} = [];
    for (my $i0 = 0; $i0 <= $#{$in->{'context'}}; $i0++) {
        $encoded->{'context'}->[$i0] = Raritan::RPC::event::KeyValue::encode($in->{'context'}->[$i0]);
    }
    return $encoded;
}

sub decode {
    my ($agent, $in) = @_;
    my $decoded = {};
    $decoded->{'type'} = $in->{'type'};
    $decoded->{'id'} = [];
    for (my $i0 = 0; $i0 <= $#{$in->{'id'}}; $i0++) {
        $decoded->{'id'}->[$i0] = $in->{'id'}->[$i0];
    }
    $decoded->{'asserted'} = ($in->{'asserted'}) ? 1 : 0;
    $decoded->{'timeStamp'} = $in->{'timeStamp'};
    $decoded->{'context'} = [];
    for (my $i0 = 0; $i0 <= $#{$in->{'context'}}; $i0++) {
        $decoded->{'context'}->[$i0] = Raritan::RPC::event::KeyValue::decode($agent, $in->{'context'}->[$i0]);
    }
    return $decoded;
}

1;
