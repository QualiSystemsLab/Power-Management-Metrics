/** Event interface */
module event {

    /** Data push service configuration interface */
    interface DataPushService {

	/**
	 * Data Push Entry Types
	 */
	enumeration EntryType {
	    SENSORLIST,				///< Sensor values for a set of sensors
	    SENSORLOG,				///< Sensor log
	    AMSLIST,				///< Asset Management information for a set of AMS strips
	    AMSLOG,				///< Asset Management log
	    AUDITLOG				///< Audit log
	};

	/** Error codes */
	constant int ERR_NO_SUCH_ID = 1;		///< No such ID
	constant int ERR_INVALID_PARAMS = 2;		///< Invalid parameters
	constant int ERR_MAX_ENTRIES_REACHED = 3;	///< Maximum number of entries reached

	/**
	 * Data Push Entry settings
	 */
	structure EntrySettings {
	    string url;         ///< Destination host
	    boolean allowOffTimeRangeCerts; ///< allow expired and not yet valid TLS certificates
	    string caCertChain; ///< TLS CA certificate chain
	    boolean useAuth;    ///< \c true to use HTTP basic authentication
	    string username;    ///< Authentication user name
	    string password;    ///< Password; write-only, empty to leave unchanged
	    EntryType type; ///< Type of data
	    vector<string> items; ///< Included items (e.g. list of sensors) depending on type
	};

	/**
	 * Add a new entry.
	 *
	 * @param entryId        Result: New entry id, automatically assigned
	 * @param entrySettings  New Model Push Entry settings
	 *
	 * @return 0 if OK
	 * @return 2 if the settings are invalid
	 * @return 3 if the maximum number of entries is reached
	 */
	int addEntry(out int entryId, in EntrySettings entrySettings);

	/**
	 * Modify an existing entry.
	 *
	 * @param entryId        Entry id
	 * @param entrySettings  New Model Push Entry settings
	 *
	 * @return 0 if OK
	 * @return 1 if the entry does not exist
	 * @return 2 if the settings are invalid
	 */
	int modifyEntry(in int entryId, in EntrySettings entrySettings);

	/**
	 * Delete an entry.
	 *
	 * @param entryid  Entry id
	 *
	 * @return 0 if OK
	 * @return 1 if the entry does not exist
	 */
	int deleteEntry(in int entryId);

	/**
	 * Retrieve an entry.
	 *
	 * @param entrySettings  Result: Model Push Entry settings
	 * @param entryId        Entry id
	 *
	 * @return 0 if OK
	 * @return 1 if the entry does not exist
	 */
	int getEntry(out EntrySettings entrySettings, in int entryId);

	/**
	 * Retrieve a list of entries.
	 *
	 * @return List of Entry Settings
	 */
	map<int, EntrySettings> listEntries();

	/**
	 * Push data for one specified entry
	 *
	 * @param entryId  Entry id
	 *
	 * @return 0 if OK
	 * @return 1 if entry does not exist
	 *
	 */
	int pushData(in int entryId);

    };

}
