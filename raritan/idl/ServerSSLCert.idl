/**
 * SSL Certificate Management
 */
module cert {

    /** SSL certificate management interface */
    interface ServerSSLCert {

	/** Certificate issuer or subject attributes */
	structure CommonAttributes {
	    string country;		///< Country code
	    string stateOrProvince;	///< State or province
	    string locality;		///< Locality or city
	    string organization;	///< Organization
	    string organizationalUnit;	///< Organizational Unit
	    string commonName;		///< Common Name
	    string emailAddress;	///< Email Address
	};

	/** Certificate signing request information */
	structure ReqInfo {
	    CommonAttributes subject;	///< Certificate subject attributes
	    int keyLength;		///< Key length in bits
	};

	/** Certificate information */
	structure CertInfo {
	    CommonAttributes subject;	///< Subject attributes
	    CommonAttributes issuer;	///< Issuer attributes
	    string invalidBefore;	///< Begin of validity period
	    string invalidAfter;	///< End of validity period
	    string serialNumber;	///< Serial number
	    int keyLength;		///< Key length in bits
	};

	/** Certificate manager information */
	structure Info {
	    boolean havePendingReq;	///< \c true if a CSR is pending
	    boolean havePendingCert;	///< \c true if an uploaded certificate is pending activation
	    ReqInfo pendingReqInfo;	///< Information about pending CSR
	    CertInfo pendingCertInfo;	///< Information about pending certificate
	    CertInfo activeCertInfo;	///< Information about active certificate
	    int maxSignDays;		///< Maximum number of days a self signed certificate will be valid.
					///< Necessary because openssl < 1.0 does not handle time overflows.
	};

	/**
	 * Generate an unsigned key pair.
	 *
	 * @param reqInfo    Certificate signing request information
	 * @param challenge  Challenge password
	 *
	 * @return 0 if OK
	 * @return 1 if the requested key length is invalid
	 * @return 2 if there is already a pending CSR
	 * @return 3 if the key generation failed
	 */
	int generateUnsignedKeyPair(in ReqInfo reqInfo, in string challenge);

	/**
	 * Generate a self-signed key pair.
	 *
	 * @param reqInfo  Certificate signing request information
	 * @param days     Number of days the certificate will be valid
	 *
	 * @return 0 if OK
	 * @return 1 if the requested key length is invalid
	 * @return 2 if there is already a pending CSR
	 * @return 3 if the key generation failed
	 */
	int generateSelfSignedKeyPair(in ReqInfo reqInfo, in int days);

	/**
	 * Remove a pending certificate signing request or certificate.
	 */
	void deletePending();

	/**
	 * Retrieve certificate manager information.
	 *
	 * @param info  Result: Certificate manager information
	 */
	void getInfo(out Info info);

	/**
	 * Activate a pending key pair.
	 *
	 * @return 0 if OK
	 * @return 1 if no key is pending
	 * @return 2 if no certificate is pending
	 * @return 3 if the certificate format is invalid
	 * @return 4 if the certificate does not match the key
	 */
	int installPendingKeyPair();

    };

}
